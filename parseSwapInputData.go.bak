package main

import (
	"encoding/json"
	"fmt"
	"github.com/chaosirgit/defi-common/helpers"
	"github.com/chaosirgit/defi-common/pkg/contract/pancakeSwapRouterV3"
	"github.com/chaosirgit/defi-common/pkg/contract/uniSwapRouterV3"
	"github.com/chaosirgit/defi-common/structs"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
)

const (
	ethScanAPIKey     = "5BYKWYG4PUIFMD61BK4HCA1UHEFRSZ8S7Z"
	ethScanBaseURL    = "https://api.bscscan.com/api?module=account"
	ethScanNormalTx   = "&action=txlist"
	ethScanInternalTx = "&action=txlistinternal"
)

type Results struct {
	Status string `json:"status"`
	Message string `json:"message"`
	Result []Transaction `json:"result"`
}

type Transaction struct {
	Hash             string `json:"hash"`
	To               string `json:"to"`
	ContractAddress  string `json:"contractAddress"`
	Value            string `json:"value"`
	Input            string `json:"input"`
}

type ParseInput struct {
	structs.ParseRouterMethodAndParams
	Extension interface{} `json:"extension"`
}

func main() {
	if len(os.Args) < 4 {
		fmt.Println("Usage: <program> <inputData> <routerVersion> <swapName>")
		return
	}

	inputData := os.Args[1]
	routerVersion, err := strconv.ParseInt(os.Args[2], 10, 64)
	if err != nil {
		fmt.Printf("Error parsing routerVersion: %v\n", err)
		return
	}
	swapName := os.Args[3]
	var res ParseInput

	params, err := structs.GetMethodsAndParamsFromInputData(inputData, routerVersion, swapName)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)  // 非零退出码表示错误
	}

	var pancakeTempExactInput pancakeSwapRouterV3.IV3SwapRouterExactInputParams
	var pancakeTempExactOutput pancakeSwapRouterV3.IV3SwapRouterExactOutputParams
	var uniswapTempExactInput uniSwapRouterV3.ISwapRouterExactInputParams
	var uniswapTempExactOutput uniSwapRouterV3.ISwapRouterExactOutputParams
	if swapName == "pancakeswap" {
		if params.Method.RawName == "exactInput" {
			jd, err := json.Marshal(params.Params[0])
			if err != nil {
				fmt.Println("Marshal ExactInputParams json error (pancake)")
				os.Exit(1)
			}
			err = json.Unmarshal(jd, &pancakeTempExactInput)
			if err != nil {
				fmt.Println("Unmarshal ExactInputParams error (pancake)")
				os.Exit(1)
			}

			path, fees, err := helpers.ParsePath(pancakeTempExactInput.Path)
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
			res.Extension = map[string]interface{}{
				"path" : path,
				"fees" : fees,
			}
		}else if params.Method.RawName == "exactOutput"{
			jd, err := json.Marshal(params.Params[0])
			if err != nil {
				fmt.Println("Marshal ExactInputParams json error (pancake)")
				os.Exit(1)
			}
			err = json.Unmarshal(jd, &pancakeTempExactOutput)
			if err != nil {
				fmt.Println("Unmarshal ExactInputParams error (pancake)")
				os.Exit(1)
			}

			path, fees, err := helpers.ParsePath(pancakeTempExactOutput.Path)
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
			res.Extension = map[string]interface{}{
				"path" : path,
				"fees" : fees,
			}
		}
	}else{
		if params.Method.RawName == "exactInput" {
			jd, err := json.Marshal(params.Params[0])
			if err != nil {
				fmt.Println("Marshal ExactInputParams json error (pancake)")
				os.Exit(1)
			}
			err = json.Unmarshal(jd, &uniswapTempExactInput)
			if err != nil {
				fmt.Println("Unmarshal ExactInputParams error (pancake)")
				os.Exit(1)
			}

			path, fees, err := helpers.ParsePath(uniswapTempExactInput.Path)
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
			res.Extension = map[string]interface{}{
				"path" : path,
				"fees" : fees,
			}
		}else if params.Method.RawName == "exactOutput"{
			jd, err := json.Marshal(params.Params[0])
			if err != nil {
				fmt.Println("Marshal ExactInputParams json error (pancake)")
				os.Exit(1)
			}
			err = json.Unmarshal(jd, &uniswapTempExactOutput)
			if err != nil {
				fmt.Println("Unmarshal ExactInputParams error (pancake)")
				os.Exit(1)
			}

			path, fees, err := helpers.ParsePath(uniswapTempExactOutput.Path)
			if err != nil {
				fmt.Println(err)
				os.Exit(1)
			}
			res.Extension = map[string]interface{}{
				"path" : path,
				"fees" : fees,
			}
		}
	}

	res.Params = params.Params
	res.Method = params.Method
	response,_ := json.Marshal(res)
	fmt.Println(string(response))
}

// Function to fetch transactions for an address
func fetchTransactions(address string, isInternal bool) ([]Transaction, error) {
	url := ethScanBaseURL + ethScanNormalTx
	if isInternal {
		url = ethScanBaseURL + ethScanInternalTx
	}
	uri := url + fmt.Sprintf("&address=%s&apikey=%s", address, ethScanAPIKey)
	fmt.Println(uri)
	resp, err := http.Get(uri)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var results Results
	//var transactions []Transaction
	err = json.Unmarshal(body, &results)
	if err != nil {
		return nil, err
	}

	return results.Result, nil
}

// Function to filter ERC20 contract addresses from transactions
func filterERC20Addresses(normalTx, internalTx []Transaction) []string {
	erc20Addresses := make(map[string]bool)

	for _, tx := range normalTx {
		if isERC20Transfer(tx.Input) {
			erc20Addresses[tx.To] = true
		}
	}

	for _, tx := range internalTx {
		if isERC20Transfer(tx.Input) {
			erc20Addresses[tx.ContractAddress] = true
		}
	}

	var addresses []string
	for addr := range erc20Addresses {
		addresses = append(addresses, addr)
	}

	return addresses
}

// Function to check if a transaction is an ERC20 transfer
func isERC20Transfer(input string) bool {
	// Assuming that ERC20 transfers have a function signature of 0xa9059cbb
	return strings.HasPrefix(input, "0xa9059cbb")
}
